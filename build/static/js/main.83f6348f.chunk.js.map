{"version":3,"sources":["Utilities/FetchUtilities.ts","Utilities/EventUtilities.ts","Context/CustomerContext.tsx","Utilities/FormUtilities.tsx","Children/Currentinfo.tsx","Parents/Main/Main.tsx","Parents/Aside/Aside.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchMainRoutes","routeName","stateFunc","stateErr","axios","then","res","status","theData","data","console","log","catch","err","getCustomerId","stateFunct","id","CurrentCustomerContext","createContext","Applicationform","props","initialValues","name","description","hasSupportContract","customerId","useContext","form","useFormik","enableReinitialize","validationSchema","Yup","max","required","onSubmit","value","action","route","post","response","clickEvent","resetForm","handleSubmit","className","htmlFor","type","placeholder","onChange","handleChange","onBlur","handleBlur","values","touched","errors","checked","ApplicationEdit","init","applicationId","appName","appHasSupportContract","support","appDescription","describe","formik","actions","comingData","put","editData","Currentinfo","service","icons","useState","rotate","setRotate","error","setError","routeData","setRouteData","needed","setneeded","isEdit","setIsEdit","editObj","setEditObj","useEffect","currentCustomer","length","filter","a","customer","doRotate","icon","header","size","map","i","onClick","doRotate2","edit","installationDate","substring","create","Main","faDatabase","faEdit","delete","faTrashAlt","faPen","Aside","customers","setCustomerId","asyncErr","App","setCustomers","setAsynErr","customerData","setCustomerData","Promise","all","get","results","fetchCustomerRoutes","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83f6348f.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {Str, Func, Obj, Num, Appedit} from './CustomTypes'\r\n\r\n//this fetches data without parameters\r\nexport const fetchMainRoutes = (routeName:Str, stateFunc: Func, stateErr: Func) =>{\r\n    axios(`https://techtestcalllogapi.azurewebsites.net/api/${routeName}`)\r\n      .then(res=>{\r\n        if(res.status === 204){\r\n          stateErr('No data exist for this request')\r\n        }\r\n        const theData: [] | string | object = res.data\r\n        stateFunc(theData)\r\n        stateErr('')\r\n        console.log(res.status)\r\n      })\r\n      .catch(err => {\r\n        stateErr(\"Aww aww, there's an issue getting data\")\r\n      })\r\n}\r\n\r\n//this fetches data related to a particluar customer \r\nexport const fetchCustomerRoutes = (customerId: Num, stateFunc: Func, stateErr: Func) =>{\r\n  try{\r\n    const application = () => axios.get(\r\n        `https://techtestcalllogapi.azurewebsites.net/api/Application/${customerId}`\r\n        )\r\n    const call = () => axios.get(\r\n        `https://techtestcalllogapi.azurewebsites.net/api/Call/${customerId}`\r\n        )\r\n    const statistics= () => axios.get(\r\n        `https://techtestcalllogapi.azurewebsites.net/api/Statistics/${customerId}`\r\n        )\r\n    const status = () => axios.get(\r\n        `https://techtestcalllogapi.azurewebsites.net/api/Status/${customerId}`\r\n        )\r\n    Promise.all([application(), call(), statistics(), status()])\r\n        .then((response: any)=>{\r\n            const application = response[0].data\r\n            const call = response[1].data\r\n            const statistics = response[2].data\r\n            const status = response[3].data\r\n\r\n            const results = [application, call, statistics, status]\r\n            console.log(results)\r\n            stateFunc({id:customerId, data:results})\r\n            stateErr('')\r\n        })\r\n      }catch(err) {\r\n    stateErr(\"There seems to be a problem getting data for this customer\")\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//post requests\r\nexport const postData = (routeName: Str, data:Obj) =>{\r\n  axios.post(`https://techtestcalllogapi.azurewebsites.net/api/${routeName}`, data)\r\n  .then(response=> console.log(response))\r\n  .catch(err=> console.log(err))\r\n}\r\n\r\n//put request\r\nexport const editData = (routeName: Str, comingData: Appedit)=>{\r\n  const data: object={\r\n    applicationId: comingData.applicationId,\r\n    name: comingData.appName,\r\n    description: comingData.appDescription,\r\n    hasSupportContract: comingData.appHasSupportContract\r\n  }\r\n  axios.put(`https://techtestcalllogapi.azurewebsites.net/api/${routeName}`, data)\r\n  .then(response=> console.log(response))\r\n  .catch(err=> console.log(err))\r\n}\r\n\r\n\r\n","import { Num } from \"./CustomTypes\"\r\n\r\nexport const getCustomerId = (stateFunct: Function, id: Num) =>{\r\n    stateFunct(id)\r\n}","import {createContext} from 'react'\r\nimport {Fetched} from '../Utilities/CustomTypes'\r\n\r\nexport const CurrentCustomerContext = createContext<Fetched>({id: 0, data:[]})\r\n\r\n","import React, {useContext}from 'react'\r\nimport { useFormik } from 'formik';\r\nimport {Appedit, ApplicationData, Func} from './CustomTypes'\r\nimport {CurrentCustomerContext} from '../Context/CustomerContext'\r\nimport {postData, editData} from './FetchUtilities'\r\nimport * as Yup from 'yup';\r\n\r\nexport  function Applicationform(props: {clickEvent:Func, route:string}){\r\n\r\n    const currentCustomer = useContext(CurrentCustomerContext)\r\n\r\n    //console.log(currentCustomer.id, 'yeah')\r\n\r\n    const initialValues: ApplicationData = {\r\n        name: '',\r\n        description: '',\r\n        hasSupportContract: false,\r\n        customerId: currentCustomer.id\r\n    }\r\n    const form = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues,\r\n        validationSchema:Yup.object({\r\n            name: Yup.string()\r\n                    .max(15, 'Too long').required('Name Required'),\r\n            description: Yup.string()\r\n                    .max(40, 'Maximum of 40 characters allowed')\r\n                    .required('Description Required'),\r\n            customerId: Yup.number().required('Required')\r\n        }),\r\n        onSubmit:(value, action)=>{\r\n            postData(props.route, value)\r\n            props.clickEvent()\r\n            action.resetForm()\r\n        }\r\n    })\r\n    return(\r\n        \r\n            <form onSubmit={form.handleSubmit} className='w-75 flex flex-column justify-around h-100'>\r\n            <label htmlFor=\"Name\">Name</label>\r\n            <input\r\n            type='text'\r\n            id='name'\r\n            name='name'\r\n            placeholder='The installed application'\r\n            className=''\r\n            onChange={form.handleChange}\r\n            onBlur={form.handleBlur}\r\n            value={form.values.name}\r\n            />\r\n            {form.touched.name && form.errors.name ?\r\n            <div className='highlight b f6'>{form.errors.name}</div>: null}\r\n\r\n            <label htmlFor=\"description\">Description</label>\r\n            <input\r\n            type='text'\r\n            id='description'\r\n            placeholder='A description of the application'\r\n            name='description'\r\n            onChange={form.handleChange}\r\n            onBlur={form.handleBlur}\r\n            value={form.values.description}\r\n            />\r\n            {form.touched.description && form.errors.description ?\r\n            <div className='highlight b f6'>{form.errors.description}</div>: null}\r\n\r\n            <label className='flex items-center'>\r\n             <input\r\n               type=\"checkbox\"\r\n               className='w1 h1 mr1 mv1 textaltbg'\r\n               name=\"hasSupportContract\"\r\n               checked={form.values.hasSupportContract}\r\n               onChange={form.handleChange}\r\n               onBlur={form.handleBlur}\r\n               \r\n             />\r\n            Has Support Contract?\r\n           </label>\r\n\r\n            <label htmlFor='customerId'>Customer Id</label>\r\n           <input\r\n            type='number'\r\n            id='customerId'\r\n            name='customerId'\r\n            onChange={form.handleChange}\r\n            onBlur={form.handleBlur}\r\n            value={form.values.customerId}\r\n            />\r\n            {form.touched.customerId && form.errors.customerId ?\r\n            <div className='highlight b f6'>{form.errors.customerId}</div>: null}\r\n\r\n           <button type=\"submit\" className='mt1'>Submit</button>\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nexport function ApplicationEdit (props: {clickEvent:Func, route:string, id: number, name: string, support: boolean, describe: string}){\r\n    const {route, id, name, support, describe} = props\r\n    const init: Appedit = {\r\n        applicationId: id,\r\n        appName: name,\r\n        appHasSupportContract: support,\r\n        appDescription: describe,\r\n    }\r\n\r\n    const formik= useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: init,\r\n        validationSchema: Yup.object(\r\n            {\r\n                applicationId: Yup.number().required('Application ID Required'),\r\n                appName: Yup.string().max(15, 'Too long').required('Application name required'),\r\n                appDescription: Yup.string().max(40, 'Too long').required('Description Required'),\r\n            }\r\n        ),\r\n        onSubmit:(values, actions) =>{\r\n            //alert(JSON.stringify(value, null, 2));\r\n            editData(route, values)\r\n            props.clickEvent()\r\n            actions.resetForm()\r\n        }\r\n    })\r\n\r\n    return(\r\n        <form onSubmit={formik.handleSubmit} className='w-75 flex flex-column justify-around h-100 z-999'>\r\n             <label htmlFor='applicationId'>Application Id</label>\r\n           <input\r\n            type='number'\r\n            id='applicationId'\r\n            name='applicationId'\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.applicationId}\r\n            />\r\n            {formik.touched.applicationId && formik.errors.applicationId ?\r\n            <div className='highlight b f6'>{formik.errors.applicationId}</div>: null}\r\n\r\n            <label htmlFor='name'>Application Name</label>\r\n            <input\r\n            type='text'\r\n            id='appName'\r\n            name='appName'\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.appName}\r\n            />\r\n            {formik.touched.appName && formik.errors.appName ?\r\n            <div className='highlight b f6'>{formik.errors.appName}</div>: null}\r\n\r\n            <label className='flex items-center'>\r\n            <input\r\n            type=\"checkbox\"\r\n            className='w1 h1 mr1 mv1 textaltbg'\r\n            name=\"appHasSupportContract\"\r\n            checked={formik.values.appHasSupportContract}\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            />\r\n            Has Support Contract?\r\n           </label>\r\n\r\n           <label htmlFor=\"appDescription\">Description</label>\r\n            <input\r\n            type='text'\r\n            id='appDescription'\r\n            placeholder='A description of the application'\r\n            name='appDescription'\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.appDescription}\r\n            />\r\n            {formik.touched.appDescription && formik.errors.appDescription ?\r\n            <div className='highlight b f6'>{formik.errors.appDescription}</div>: null}\r\n            <button type=\"submit\" className='mt1'>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n","import React, { useEffect, useState, useContext }  from 'react'\r\nimport {Str, Icons, Apparr} from '../Utilities/CustomTypes'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {ApplicationEdit, Applicationform} from '../Utilities/FormUtilities'\r\nimport { fetchMainRoutes } from '../Utilities/FetchUtilities'\r\nimport {CurrentCustomerContext} from '../Context/CustomerContext'\r\n\r\nexport default function Currentinfo (props: \r\n    {service:Str,\r\n    className:Str, icons: Icons,\r\n    }){\r\n    const {service, className, icons} = props\r\n\r\n\r\n    const [rotate, setRotate] = useState(false)\r\n    const [error, setError] =useState<Str>('')\r\n    const [routeData, setRouteData] = useState<Apparr>([])\r\n    const [needed, setneeded] = useState<Apparr>([])\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [editObj, setEditObj] = useState({id: 0, name: '', describe: '', support: false})\r\n\r\n    useEffect(()=>{\r\n        fetchMainRoutes(service, setRouteData, setError)\r\n    }, [service])\r\n\r\n    let currentCustomer = useContext(CurrentCustomerContext)\r\n\r\n    useEffect(()=>{\r\n        if(routeData.length > 0){\r\n            setneeded(routeData.filter(a=> a.customer.id === currentCustomer.id))\r\n        }\r\n    }, [routeData, currentCustomer.id])\r\n    \r\n    \r\n    const doRotate = () =>{\r\n        setRotate(!rotate)\r\n        setIsEdit(false)\r\n    }\r\n\r\n    const doRotate2 = (id: number, name: string, describe: string, support: boolean)=>{\r\n        setIsEdit(true)\r\n        setRotate(!rotate)\r\n        setEditObj({id, name, describe, support})\r\n    }\r\n\r\n    const {id, name, describe, support} = editObj\r\n\r\n    return (\r\n        <div className={`${className} ${rotate && ''}`}>\r\n            {needed.length > 0 && <h1 className='customername f3 lh-title text'>{needed[0].customer.name}</h1>}\r\n            <div className={`block1inner relative w-100 h-100 ${rotate && 'rotate'}`}>\r\n                <div className='front'>\r\n                    <div className='absolute top-1 left-1 flex items-center b highlight verticaltext'>\r\n                        <FontAwesomeIcon icon={icons.header} size='2x'/>\r\n                        <div className='f6 measure lh-title mt2 text flex'>{service}</div>\r\n                    </div>\r\n                  \r\n                    <div className={`${rotate ? 'dn' : 'flex w-90 h-100 flex-wrap center justify-center items-center pa3 overflow-y-auto'}`}>\r\n                        \r\n                        {needed.length > 0 && service === 'Application'\r\n                        ?   (\r\n                               needed.map((data, i)=>{\r\n                                   return (\r\n                                       <div key={i} className='w-30 textaltbg pa3 ma2 f5 measure b br3 relative'>\r\n                                        <div className='flex justify-around absolute top-1 right-1 highlight'>\r\n                                            <button \r\n                                            className='iconsbg h2 w2 br-100 flex justify-center items-center mh1 bn highlight'\r\n                                            onClick={()=> doRotate2(data.id, data.name, data.description, data.hasSupportContract)}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={icons.edit} /> \r\n                                            </button>\r\n                                        </div>\r\n                                        <div className='blockid f6 measure lh-copy'>Application ID: {data.id}</div>\r\n                                        <div className='f5 measure lh-copy'>{data.name}</div>\r\n                                        <div className='f6 measure lh-copy'>{data.description}</div>\r\n                                        <div className='f6 measure lh-copy'>Installed: {data.installationDate.substring(0, 10)}</div>\r\n                                        <div className='f6 measure lh-copy'>Has Support Contract: {data.hasSupportContract ? 'Yes' : 'No'}</div>\r\n                                       </div>\r\n                                   )\r\n                               })\r\n                            )\r\n                        : <div>Customer has no records for {service}</div> || <div>{error}</div>} \r\n                    </div>\r\n                \r\n                    <button className='flex items-center flex-column absolute shadow-3 highlightbg text iconsbg\r\n                    bottom-1 left-1 b pa1 grow-large w3 h3 br-100 ba' onClick={doRotate}>\r\n                        <div \r\n                        className=' \r\n                        flex justify-center items-center'>\r\n                            <FontAwesomeIcon icon={icons.create} size='1x'/>\r\n                        </div>\r\n                        <div className='f7 measure mt1'>Add Record</div>\r\n                    </button>\r\n                </div>\r\n                {/* this makes the creation of records */}\r\n                <div className={`back h-100 flex justify-center items-center mt0`}>\r\n                        {!isEdit \r\n                        ? <Applicationform clickEvent={doRotate} route={service}/>\r\n                        : <ApplicationEdit\r\n                        clickEvent={doRotate} \r\n                        route={service} id={id}  \r\n                        name={name} describe={describe}\r\n                        support={support}\r\n                        />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Currentinfo from '../../Children/Currentinfo'\r\nimport {faDatabase, faEdit, faPen, faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Main (){\r\n    return (\r\n\r\n        <div className='w-80'>\r\n           <Currentinfo\r\n           service={'Application'}\r\n           icons={{header: faDatabase, edit: faEdit, delete: faTrashAlt, create: faPen}}\r\n           className={`block1 flex justify-center items-center relative shadow-4`}/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Func, Cust, Arr2, Str} from '../../Utilities/CustomTypes'\r\n\r\n\r\n\r\nexport default function Aside (props: {customers: Arr2, setCustomerId: Func, getCustomerId:Func, asyncErr:Str}){\r\n    \r\n    const {customers, setCustomerId, getCustomerId, asyncErr} = props\r\n    return (\r\n        <div className='h-50 ma2 flex flex-column justify-between  pa1'>\r\n            {customers.length >0 ? customers.map((a:Cust, i: number)=>(\r\n                <div \r\n                key={i} \r\n                className='customer flex flex-column justify-center h-100 pointer' \r\n                onClick={()=> getCustomerId(setCustomerId, a.id)}>\r\n                    <div className='flex id'>\r\n                        <div className='f5 measure lh-copy ttu'>Customer ID:</div>\r\n                        <div className='measure f5 lh-copy'>{a.id}</div>\r\n                    </div>\r\n                    <div className='measure f4 lh-solid name'>{a.name}</div>\r\n                </div>\r\n            )) \r\n            :(\r\n                <div>\r\n                    {asyncErr}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {fetchCustomerRoutes, fetchMainRoutes} from './Utilities/FetchUtilities'\nimport {getCustomerId} from './Utilities/EventUtilities'\nimport {Arr2, Str, Num, Fetched} from './Utilities/CustomTypes'\nimport Main from './Parents/Main/Main'\nimport Aside from './Parents/Aside/Aside'\nimport {CurrentCustomerContext} from './Context/CustomerContext'\n\n\nfunction App() {\n  const [customers, setCustomers] = useState<Arr2>([])\n  const [asyncErr, setAsynErr] = useState <Str>('')\n  const [customerId, setCustomerId] = useState<Num>(0)\n  const [customerData, setCustomerData] = useState<Fetched>({id:0, data:[]})\n\n  useEffect(()=>{\n    fetchMainRoutes('Customer', setCustomers, setAsynErr)\n  }, [])\n\n  useEffect(()=>{\n    customerId && fetchCustomerRoutes(customerId, setCustomerData, setAsynErr)\n  }, [customerId])\n\n  return (\n    <div className=\"w-100 vh-100 flex flex-row\">\n\n      <aside className=\"w-25  mh2 mv2 br4 flex justify-center items-center shadow-1\">\n        <Aside customers={customers} setCustomerId={setCustomerId} getCustomerId={getCustomerId} asyncErr={asyncErr}/>\n      </aside>\n      <main className=\"w-75 flex flex-column items-center mt2\">\n        <h1 className='flex justify- w-75 ma2 f2 lh-title'>Main Dashboard</h1>\n        <CurrentCustomerContext.Provider value={customerData}>\n          <Main/>\n        </CurrentCustomerContext.Provider>\n      </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}